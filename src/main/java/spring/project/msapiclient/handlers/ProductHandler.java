package spring.project.msapiclient.handlers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.stereotype.Component;import org.springframework.web.reactive.function.server.ServerRequest;import org.springframework.web.reactive.function.server.ServerResponse;import reactor.core.publisher.Mono;import spring.project.msapiclient.entity.Product;import spring.project.msapiclient.services.IProductService;@Componentpublic class ProductHandler {    @Autowired    private IProductService productService;    public Mono<ServerResponse> select(ServerRequest request) {        return ServerResponse.ok()                .contentType(MediaType.APPLICATION_JSON)                .body(productService.select(), Product.class);    }    public Mono<ServerResponse> get(ServerRequest request) {        String id = request.pathVariable("id");        return productService.get(id)                .flatMap(product -> ServerResponse.ok()                        .contentType(MediaType.APPLICATION_JSON)                        .syncBody(product))                .switchIfEmpty(ServerResponse.notFound().build());    }    public Mono<ServerResponse> insert(ServerRequest request) {        Mono<Product> productMono = request.bodyToMono(Product.class);        return productMono.flatMap(product -> productService.insert(product))                .flatMap(product -> ServerResponse.ok()                        .contentType(MediaType.APPLICATION_JSON)                        .syncBody(product));    }    public Mono<ServerResponse> update(ServerRequest request) {        Mono<Product> productMono = request.bodyToMono(Product.class);        String id = request.pathVariable("id");        return productMono.flatMap(product -> productService.update(product, id))                .flatMap(product -> ServerResponse.ok()                        .contentType(MediaType.APPLICATION_JSON)                        .syncBody(product));    }    public Mono<ServerResponse> delete(ServerRequest request) {        String id = request.pathVariable("id");        return productService.delete(id)                .then(ServerResponse.noContent().build());    }}