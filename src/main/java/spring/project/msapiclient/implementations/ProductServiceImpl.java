package spring.project.msapiclient.implementations;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.stereotype.Service;import org.springframework.web.reactive.function.client.WebClient;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;import spring.project.msapiclient.entity.Product;import spring.project.msapiclient.services.IProductService;import java.util.Collections;import java.util.HashMap;import java.util.Map;@Servicepublic class ProductServiceImpl implements IProductService {    @Autowired    private WebClient webClient;    @Override    public Flux<Product> select() {        return webClient.get()                .uri("/select")                .accept(MediaType.APPLICATION_JSON)                .exchange()                .flatMapMany(clientResponse -> clientResponse.bodyToFlux(Product.class));    }    @Override    public Mono<Product> get(String id) {        Map<String, Object> param = new HashMap<>();        param.put("id", id);        return webClient.get()                .uri("/get/{id}", param)                .accept(MediaType.APPLICATION_JSON)                .retrieve()                .bodyToMono(Product.class);    }    @Override    public Mono<Product> insert(Product product) {        return webClient.post()                .uri("/insert")                .accept(MediaType.APPLICATION_JSON)                .contentType(MediaType.APPLICATION_JSON)                .syncBody(product)                .retrieve()                .bodyToMono(Product.class);    }    @Override    public Mono<Product> update(Product product, String id) {        return webClient.put()                .uri("/update/{id}", Collections.singletonMap("id", id))                .accept(MediaType.APPLICATION_JSON)                .contentType(MediaType.APPLICATION_JSON)                .syncBody(product)                .retrieve()                .bodyToMono(Product.class);    }    @Override    public Mono<Void> delete(String id) {        return webClient.delete()                .uri("/delete/{id}", Collections.singletonMap("id", id))                .exchange()                .then();    }}